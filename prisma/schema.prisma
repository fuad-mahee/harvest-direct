// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String?
  role         UserRole      @default(CONSUMER)
  status       UserStatus    @default(PENDING)
  products     Product[]
  farmerProfile FarmerProfile?
  cart         Cart?
  orders       Order[]       @relation("UserOrders")
  farmerOrderItems OrderItem[] @relation("FarmerOrderItems")
  notifications Notification[]
  // Review and Rating relations
  reviews      ProductReview[] @relation("UserReviews")
  givenFarmerRatings FarmerRating[] @relation("UserFarmerRatings")
  receivedFarmerRatings FarmerRating[] @relation("FarmerRatings")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Product model for farmer crop listings
model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  inStock     Boolean       @default(true)
  quantity    Int           @default(0)
  unit        String        @default("kg")
  imageUrl    String?
  farmerId    String
  farmer      User          @relation(fields: [farmerId], references: [id])
  status      ProductStatus @default(PENDING)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     ProductReview[] // Product reviews relation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Cart model for customer shopping cart
model Cart {
  id         String     @id @default(cuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// CartItem model for items in shopping cart
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId]) // Ensure one product per cart
}

// Order model for customer orders
model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation("UserOrders", fields: [userId], references: [id])
  total      Float
  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  farmerRatings FarmerRating[] // Farmer ratings for this order
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// OrderItem model for items in an order
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   // Price at time of order
  farmerId  String  // For farmer notifications
  farmer    User    @relation("FarmerOrderItems", fields: [farmerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notification model for order notifications
model Notification {
  id                  String           @id @default(cuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id])
  type                NotificationType
  title               String
  message             String
  orderId             String?
  relatedEntityId     String?          // Can be productId, orderId, etc.
  relatedEntityType   String?          // 'PRODUCT', 'ORDER', etc.
  read                Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

// Farmer Profile model for farm details and certification
model FarmerProfile {
  id              String               @id @default(cuid())
  farmerId        String               @unique
  farmer          User                 @relation(fields: [farmerId], references: [id])
  farmName        String
  farmAddress     String
  farmSize        String               // e.g., "10 acres", "5 hectares"
  farmingPractices String[]            // Array of practices like "Organic", "Sustainable", etc.
  certifications  String[]             // Existing certifications
  aboutFarm       String?              // Farm description
  contactPhone    String?
  website         String?
  specialization  String[]             // e.g., ["Vegetables", "Fruits"]
  experience      Int?                 // Years of farming experience
  status          FarmerProfileStatus  @default(PENDING)
  adminNotes      String?              // Admin notes for approval/rejection
  certificationBadge String?           // Certification badge name/type
  approvedAt      DateTime?
  approvedBy      String?              // Admin user ID who approved
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

enum NotificationType {
  ORDER_RECEIVED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  NEW_PRODUCT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  FARMER
  CONSUMER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FarmerProfileStatus {
  PENDING
  APPROVED
  REJECTED
}

// Educational Resource model for farmer resources
model EducationalResource {
  id          String   @id @default(cuid())
  title       String
  content     String   // Main content/article
  summary     String?  // Brief summary
  category    String   // e.g., "Crop Management", "Pest Control", "Soil Health"
  tags        String[] // Search tags
  imageUrl    String?  // Optional featured image
  author      String?  // Author name
  publishedBy String   // Admin user ID who published
  published   Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Product Review model for consumer reviews and ratings
model ProductReview {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String   // Consumer who wrote the review
  user        User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  rating      Float    // 1-5 star rating
  title       String?  // Optional review title
  comment     String?  // Optional review comment
  verified    Boolean  @default(false) // Verified purchase
  helpful     Int      @default(0) // Helpful votes count
  reported    Boolean  @default(false) // Reported for moderation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, userId]) // One review per user per product
}

// Farmer Rating model for overall farmer ratings
model FarmerRating {
  id          String   @id @default(cuid())
  farmerId    String   // Farmer being rated
  farmer      User     @relation("FarmerRatings", fields: [farmerId], references: [id], onDelete: Cascade)
  userId      String   // Consumer who rated the farmer
  user        User     @relation("UserFarmerRatings", fields: [userId], references: [id], onDelete: Cascade)
  orderId     String?  // Optional: Link to specific order
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  rating      Float    // 1-5 star rating
  comment     String?  // Optional comment about farmer experience
  categories  Json?    // Rating categories: {"quality": 4.5, "communication": 5.0, "delivery": 4.0}
  verified    Boolean  @default(false) // Verified transaction
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([farmerId, userId, orderId]) // One rating per user per farmer per order
}
